import "../public/preprocessed.js";

import {
  all,
  get,
  has,
  getDefault,
  getThrow,
  getIntegerThrowInvalid, // equivalent to get
  getIntegerDefault,
  getIntegerThrow,
  mockEnv,
} from "../public/env.js";

import urlwizzard from "./urlwizzard.js";

import manipulation from "./manipulation.js";

import addAnchorLinks from "./addAnchorLinks.js";

import log from "./log.js";

import doSort from "./doSort.js";

import toc from "./toc.js";

import doEval from "./doEval.js";

import scrollToHashAndHighlight from "./scrollToHashAndHighlight.js";

import buildHeader from "./buildHeader.js";

import buildFooter from "./buildFooter.js";

import doace from "./doace.js";

window.ppp = {
  all,
  get,
  has,
  getDefault,
  getThrow,
  getIntegerThrowInvalid, // equivalent to get
  getIntegerDefault,
  getIntegerThrow,
};

window.manipulation = manipulation;

window.log = log;

(function () {
  let found;
  try {
    found = Boolean(document.body);
  } catch (e) {}

  if (!found) {
    document.write(
      `<h1 style="color: red; position: fixed; top: 30%; background-color: white;">Can't find document.body - it probably means that /github.js is loaded in &lt;head> instead at the end of &lt;body></h1>`
    );
  }
})();

/**
 * Main mounting point in global scope
 */
window.sasync = {
  loaded: {},
};

// load common css and js

(function () {
  // <link rel="stylesheet" href="../../css/normalize.css">

  [
    "/css/normalize.css",
    "/css/main.css",
    "/noprettier/vanilla-tabs.css",
    "//fonts.googleapis.com/css?family=Open+Sans:300,400,500,700,900",
  ].forEach(function (u) {
    // https://stackoverflow.com/a/524721
    var head = document.head || document.getElementsByTagName("head")[0],
      style = document.createElement("link");

    // style.type = 'text/css';

    style.setAttribute("rel", "stylesheet");

    style.setAttribute("href", u);

    head.appendChild(style);
  });

  log.blue("executed", "adding extra styles");
})();

(function () {
  var tmp = document.createElement("div");

  tmp.innerHTML =
    '\
          <!-- generated by: https://www.favicon-generator.org/ -->\
          <!-- generated by: https://realfavicongenerator.net/favicon_result?file_id=p1e6ljeig5qc41s3r1s418k41qv86#.XqKd1NNKgxw -->\
          <link rel="apple-touch-icon" sizes="57x57" href="/apple-icon-57x57.png?">\
          <link rel="apple-touch-icon" sizes="60x60" href="/apple-icon-60x60.png?">\
          <link rel="apple-touch-icon" sizes="72x72" href="/apple-icon-72x72.png?">\
          <link rel="apple-touch-icon" sizes="76x76" href="/apple-icon-76x76.png?">\
          <link rel="apple-touch-icon" sizes="114x114" href="/apple-icon-114x114.png?">\
          <link rel="apple-touch-icon" sizes="120x120" href="/apple-icon-120x120.png?">\
          <link rel="apple-touch-icon" sizes="144x144" href="/apple-icon-144x144.png?">\
          <link rel="apple-touch-icon" sizes="152x152" href="/apple-icon-152x152.png?">\
          <link rel="apple-touch-icon" sizes="180x180" href="/apple-icon-180x180.png?">\
          <link rel="icon" type="image/png" sizes="192x192"  href="/android-icon-192x192.png?">\
          <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png?">\
          <link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png?">\
          <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png?">\
          <link rel="manifest" href="/manifest.json">\
          <link rel="manifest" href="/site.webmanifest">\
          <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">\
          <meta name="msapplication-TileColor" content="#ffffff">\
          <meta name="msapplication-TileImage" content="/ms-icon-144x144.png?">\
          <meta name="theme-color" content="#ffffff">\
          <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">\
      ';

  var h = document.getElementsByTagName("head")[0];

  Array.prototype.slice.call(tmp.children).forEach(function (e) {
    manipulation.append(h, e);
  });

  log.blue("DOMContentLoaded", "setting favicon", "[triggered in github.js]");
})();

// edit & profile ribbons
(function () {
  // https://github.com/stopsopa/stopsopa.github.io/edit/master/demos/jquery.elkanatooltip/katownik.html
  // https://stopsopa.github.io/
  // user stopsopa
  // path /pages/css-grid/index.html

  window.isDevEnvironment = location.port !== "";

  var github = (function (def) {
    let host = def;

    var user = host.replace(/^(.*)\.github\.io$/, "$1");

    // log('user', user)

    let path = location.pathname;

    if (/\/$/.test(path)) {
      path += "/index.html";
    }

    const templateRegex = /^(.*)\.rendered\.html$/;

    // log("path", path);

    if (templateRegex.test(path)) {
      path = path.replace(templateRegex, "$1.template.html");
    }

    // log("path", path);

    var github = `//github.com/${user}/${user}.github.io/edit/master${path}`;

    // log("github", github);

    return github;
  })("stopsopa.github.io");

  log.green("defined", "window.github - link of edit page on github: " + github);

  document.body.hasAttribute("nogithublink") ||
    (function () {
      var div = document.createElement("div");

      div.classList.add("github-link");

      manipulation.append(document.body, div);

      var a = document.createElement("a");

      a.innerText = "edit";

      a.setAttribute("href", github);

      manipulation.append(div, a);

      var css = `
body .github-link {
    top: 0;
    right: 0;
    height: 47px;
    width: 47px;
    position: absolute;
    overflow: hidden;
}
body .github-link > a {
    border: 1px solid #2d2d2d;
    top: 7px;
    right: -18px;
    position: absolute;
    transform: rotate(45deg);
    padding-left: 20px;
    padding-right: 20px;
    color: white;
    text-decoration: none;
    background-color: #2d2d2d;
}
body .github-link > a:hover {
    cursor: pointer;
    color: #2d2d2d;
    background-color: white;
}
            `;
      // https://stackoverflow.com/a/524721
      var head = document.head || document.getElementsByTagName("head")[0],
        style = document.createElement("style");

      style.type = "text/css";
      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }

      head.appendChild(style);

      log.blue("ribbon link", "adding edit ribbon link", "[triggered in github.js]");
    })();

  document.body.hasAttribute("noprofileribbon") ||
    (function () {
      var a = document.createElement("a");

      a.classList.add("github-profile");

      a.innerText = "profile";

      a.setAttribute("href", "//github.com/stopsopa?tab=repositories");

      manipulation.append(document.body, a);

      var css = `
body .github-profile {
    border: 1px solid #2d2d2d;
    top: 6px;
    left: -23px;
    position: absolute;
    transform: rotate(-38deg);
    padding-left: 20px;
    padding-right: 20px;
    color: white;
    text-decoration: none;
    background-color: #2d2d2d;
    font-size: 15px;
    padding-bottom: 2px;
    padding-top: 2px;
}
body .github-profile:hover {
    cursor: pointer;
    color: #2d2d2d;
    background-color: white;
}
            `;
      // https://stackoverflow.com/a/524721
      var head = document.head || document.getElementsByTagName("head")[0],
        style = document.createElement("style");

      style.type = "text/css";
      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }

      head.appendChild(style);

      log.blue("DOMContentLoaded", "adding profile ribbon link", "[triggered in github.js]");
    })();

  if (window.isDevEnvironment) {
    // for some reason (maybe due to /etc/hosts record to handle local server from domain http://stopsopa.github.io.local/
    // there is huge delay in the locahost server request from the browser
    // The idea behind pinging it every few seconds is to maybe somehow keep local dns cache fresh
    setInterval(() => {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", "/ping");
      xhr.send();
    }, 5000);
  }
})();

(async function () {
  async function loadJs(name, url, test) {
    return new Promise((resolve, reject) => {
      if (typeof test !== "function") {
        throw new Error("loadJs error: test should be a function for " + name + " async loader");
      }

      if (typeof url !== "string") {
        throw new Error("loadJs error: url should be a string for " + name + " async loader");
      }

      // https://stackoverflow.com/a/524721
      var head = document.head || document.getElementsByTagName("head")[0],
        script = document.createElement("script");

      var handler = setInterval(function () {
        if (test()) {
          clearInterval(handler);

          log.yellow("loadJs", `${name} loaded`);

          resolve();
        }
      }, 100);

      script.setAttribute("src", url);

      head.appendChild(script);
    });
  }

  try {
    await loadJs("preprocessed.js", "/public/preprocessed.js", function () {
      try {
        return typeof window?.process?.env === "object";
      } catch (e) {
        return false;
      }
    });

    console.log("setting mockEnv(window.process.env) after loading preprocessed.js", window.process.env);
    mockEnv(window.process.env);

    if (Object.keys(all() || {}).length === 0) {
      throw new Error(`js/github.js error: all() can't return 0 - load preprocessed.js first`);
    }

    await loadJs("polyfill", "/noprettier/polyfill.js", function () {
      try {
        return window.sasync.loaded.polyfill_js;
      } catch (e) {
        return false;
      }
    });

    await Promise.all([
      loadJs("vanilla-tabs.js", "/noprettier/vanilla-tabs.js", function () {
        try {
          return typeof window.vanillaTabs === "object";
        } catch (e) {
          return false;
        }
      }),
      // loadJs("permalink", "/noprettier/permalink-my.js", function () {
      //   try {
      //     return typeof window.sasync.loaded.mountpermalink === "function";
      //   } catch (e) {
      //     return false;
      //   }
      // }),
      loadJs("AnchorJS", "/noprettier/anchor.min.js", function () {
        try {
          return typeof window.AnchorJS == "function";
        } catch (e) {
          return false;
        }
      }),
      loadJs("lodash", "/noprettier/lodash-4.17.10.js", function () {
        try {
          return typeof _.VERSION === "string";
        } catch (e) {}
        return false;
      }),
      loadJs("ace", "/noprettier/ace/ace-builds-1.5.0/src-min-noconflict/ace.js", function () {
        // how to use: https://ace.c9.io/#nav=howto
        try {
          return typeof window.ace.edit === "function";
        } catch (e) {}
        return false;
      }),
    ]);

    await loadJs(
      "ace extension ext-linking",
      "/noprettier/ace/ace-builds-1.5.0/src-min-noconflict/ext-linking.js",
      function () {
        try {
          return true;
          return window.sasync.loaded.polyfill_js;
        } catch (e) {
          return false;
        }
      }
    );

    if (!/^https?:\/\//.test(getThrow("GITHUB_SOURCES_PREFIX"))) {
      throw new Error(`GITHUB_SOURCES_PREFIX env var is not defined or invalid`);
    }

    log.blue("Promise.all loadJs loaded");

    await buildHeader();

    await buildFooter();

    // await window.sasync.loaded.mountpermalink();

    await addAnchorLinks();

    await toc();

    await doSort();

    await urlwizzard();

    if (typeof window.beforeAceEventPromise === "function") {
      log.blue("executed", "window.doace() waiting for window.beforeAceEventPromise() found");

      await window.beforeAceEventPromise();
    } else {
      log.blue("executed", "window.doace() waiting for window.beforeAceEventPromise() NOT found");
    }

    const unbind = vanillaTabs.bind();
    vanillaTabs.active({
      onChange: async (e) => {
        console.log("vanillaTabs.active(onChange)", e);

        doEval();

        await doace();
      },
    });

    doEval();

    await doace();

    await scrollToHashAndHighlight();

    window.githubJsReady = true;

    if (Array.isArray(window.allLoaded)) {
      const preexisting = window.allLoaded;
      window.allLoaded = {
        push: function (trigger) {
          console.log("Internal: run my function");
          trigger();
        },
      };
      preexisting.forEach(function (trigger) {
        window.allLoaded.push(trigger);
      });
    }

    log.blue(
      "DOMContentLoaded",
      "window.doace [triggered in github.js] -> window.githubJsReady = true defined (see snippet how to handle it next to this log)"
    );

    // (async function () {
    //   await new Promise((resolve) => {
    //     (function repeat() {
    //       if (window.githubJsReady) {
    //         resolve();
    //       } else {
    //         setTimeout(repeat, 50);
    //       }
    //     })();
    //   });

    //   log("do yours stuff");
    // })();
  } catch (e) {
    log.red(
      "GLOBAL CATCH ERROR: ",
      JSON.stringify(
        {
          message: e.message,
          stack: e.stack.split("\n"),
        },
        null,
        4
      )
    );
  }
})();

log.gray("finished loading", "github.js");
